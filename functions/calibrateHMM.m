function [ cHMM ] = calibrateHMM( mdData, cSettings )
%calibrateHMM calibrate a HMM for all specified number of states i 
%
%   * calibrate a HMM for all specified number of states i 
%   * use 'kmeans' or 'random' initialization of distributions
%
%   Input:
%   mdData:
%   cSettings:                  structure of settings, as specified in Runtime.m
%
%   Output:
%   cHMM:                       structure of HMMs, generated by calibrateHMM
%   cHMM(i).TransitionMatrix:   transitionmatrix 
%   cHMM(i).Mu:                 matrix of distribution means (states in columns)
%   cHMM(i).Sigma:              array of covariance matrices (for each state) 
%   cHMM(i).PDF:                gaussian mixture pdf 
%   cHMM(i).ViterbiPath:        Viterbi Sequence
%   cHMM(i).LogLik:             log-likelihood of HMM
%   cHMM(i).LogLikTrace:        evolution of log-likelihood during calibration 
%   cHMM(i).Prior:              calibrated prior 
%   cHMM(i).MixMat:             calibrated mixture matrix   
%   cHMM(i).NoParameters:       number of parameters estimated

%% Settings
[iNoAssets, iNoSamples] = size(mdData);

for i = 1: length(cSettings.NoStates)
    iNoStates = cSettings.NoStates(i);
    
    %% Initial guess of parameters
    mdPrior0 = normalise(rand(iNoStates,1));
    mdTransitionMatrix0 = mk_stochastic(rand(iNoStates,iNoStates));
    
    %% Initialize distributions
    switch cSettings.HMMInitType
    case 'kmeans'
        [mvMu0,mdSigma0] = mixgauss_init(iNoStates * cSettings.NoMixingComponents, mdData, cSettings.HMMCovType); 
        mvMu0 = reshape(mvMu0, [iNoAssets,iNoStates,cSettings.NoMixingComponents]);
        mdSigma0 = reshape(mdSigma0, [iNoAssets,iNoAssets,iNoStates,cSettings.NoMixingComponents]);
    case 'random'
        mdSigma0 = repmat(eye(iNoAssets),[1,1,iNoStates,cSettings.NoMixingComponents]);
        viIndex = randperm(iNoSamples);
        mvMu0 = reshape(mdData(:,viIndex(1:(iNoStates*cSettings.NoMixingComponents))),[iNoAssets,iNoStates,cSettings.NoMixingComponents]);
    otherwise
        error('Define: HMM - initializing procedure in cSettings!')
    end
    
    %% Initialise MixMat
    if(cSettings.NoMixingComponents == 1)
        mdMixMat0 = ones(iNoStates,1);
    else
        mdMixMat0 = mk_stochastic(rand(iNoStates,cSettings.NoMixingComponents));
    end
    
    %% EM 
    [vdLogLikTrace,mdPrior1, mdTransitionMatrix1,mdMu1,mdSigma1,mdMixMat1] = ...
    mhmm_em(mdData,mdPrior0,mdTransitionMatrix0,mvMu0,mdSigma0,mdMixMat0,'max_iter',cSettings.HMMItersMax,'verbose',0);

    %% Save / Output
    cHMM(i).NoStates = iNoStates;
    cHMM(i).TransitionMatrix = mdTransitionMatrix1;
    cHMM(i).Mu = mdMu1;
    cHMM(i).Sigma = mdSigma1;
    cHMM(i).PDF = mixgauss_prob(mdData,mdMu1,mdSigma1,mdMixMat1);
    cHMM(i).ViterbiPath = viterbi_path(mdPrior1,mdTransitionMatrix1,cHMM(i).PDF);
    cHMM(i).LogLik = mhmm_logprob(mdData,mdPrior1,mdTransitionMatrix1,mdMu1,mdSigma1,mdMixMat1);
    cHMM(i).LogLikTrace = vdLogLikTrace;
    cHMM(i).Prior = mdPrior1;
    cHMM(i).MixMat = mdMixMat1;
    cHMM(i).NoParameters = iNoStates +iNoStates^2 + iNoStates * iNoAssets *cSettings.NoMixingComponents + iNoAssets^2 * cSettings.NoMixingComponents + iNoStates * cSettings.NoMixingComponents;
    
end

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% This source code is part of RSMentalAccounting.
%
% Copyright(c) 2014 Felix Andresen
% All Rights Reserved.
%
% This program shall not be used, rewritten, or adapted as the basis of a commercial software
% or hardware product without first obtaining written permission of the author. The author make
% no representations about the suitability of this software for any purpose. It is provided
% "as is" without express or implied warranty.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Written by
%   Felix Andresen  
%   Master Thesis:  Regime Switching Models and the Mental Accounting Framework
%   Advisors:       Prof. Jan Vecer, Prof. Sebastien Lleo
%   Master of Science in Quantitative Finance, Frankfurt School of Finance and Management
%   Frankfurt am Main, Germany
%   02/2014
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Contact
%   E-mail: Felix.Andresen@gmail.com
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%